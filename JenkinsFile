pipeline {
    agent any

    environment {
        EMAIL_RECIPIENT = 'jack.a.jonesofficial@gmail.com'
        EMAIL_SUBJECT_SUCCESS = '6.1C Pipeline Status'
        EMAIL_SUBJECT_FAILURE = '6.1C Pipeline Status'
        BUILD_LOG_PATH = 'build.log' // Adjust this path based on your setup
    }

    stages {
        stage('Build using Maven') {
            steps {
                script {
                    echo "Build project_code.jar with Maven."
                    echo "Building..."
                    sleep 1
                    echo "SUCCESS"
                    // Capture build logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Build using Maven] Build using Maven completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
        }
        stage('Unit and Integration Tests using JUnit') {
            steps {
                script {
                    echo "Run unit tests on project_code.jar using JUnit."
                    echo "Testing..."
                    sleep 1
                    echo "SUCCESS"
                    echo "Run integration tests on project_code.jar using JUnit."
                    sleep 1
                    echo "SUCCESS"
                    
                    // Capture test logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Unit and Integration Tests using JUnit] Unit and Integration Tests completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${env.BUILD_LOG_PATH}", allowEmptyArchive: true
                }
                success {
                    script {
                        def logContent = readFile(file: "${env.BUILD_LOG_PATH}")
                        // Send email with build log content in body
                        mail to: "${env.EMAIL_RECIPIENT}",
                             subject: "${env.EMAIL_SUBJECT_SUCCESS}",
                             body: "Stage: Unit and Integration Tests using JUnit was successful! Here are the build logs:\n\n${logContent}"
                    }
                }
                failure {
                    script {
                        def logContent = readFile(file: "${env.BUILD_LOG_PATH}")
                        // Send email with build log content in body
                        mail to: "${env.EMAIL_RECIPIENT}",
                             subject: "${env.EMAIL_SUBJECT_FAILURE}",
                             body: "Stage: Unit and Integration Tests using JUnit was unsuccessful! Debug the code and fix the errors before building again. Here are the build logs:\n\n${logContent}"
                    }
                }
            }
        }
        stage('Code Analysis using PMD') {
            steps {
                script {
                    echo "Performing code quality analysis on project_code.jar using PMD."
                    echo "Analysing..."
                    sleep 1
                    echo "SUCCESS"
                    echo "Secondary check for specific industry standards"
                    sleep 1
                    echo "SUCCESS"
                    
                    // Capture analysis logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Code Analysis using PMD] Code Analysis using PMD completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
        }
        stage('Security Scan using Insider CLI') {
            steps {
                script {
                    echo "Perform security check on project_code.jar using Insider CLI"
                    sleep 1
                    echo "SUCCESS"
                    echo "No profound security flaws detected. Score: 98%"
                    
                    // Capture security scan logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Security Scan using Insider CLI] Security Scan using Insider CLI completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${env.BUILD_LOG_PATH}", allowEmptyArchive: true
                }
                success {
                    script {
                        def logContent = readFile(file: "${env.BUILD_LOG_PATH}")
                        // Send email with build log content in body
                        mail to: "${env.EMAIL_RECIPIENT}",
                             subject: "${env.EMAIL_SUBJECT_SUCCESS}",
                             body: "Stage: Security Scan using Insider CLI was successful! Here are the build logs:\n\n${logContent}"
                    }
                }
                failure {
                    script {
                        def logContent = readFile(file: "${env.BUILD_LOG_PATH}")
                        // Send email with build log content in body
                        mail to: "${env.EMAIL_RECIPIENT}",
                             subject: "${env.EMAIL_SUBJECT_FAILURE}",
                             body: "Stage: Security Scan using Insider CLI was unsuccessful! Debug the code and fix the errors before building again. Here are the build logs:\n\n${logContent}"
                    }
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploy project_code.jar to Azure Spring App with Azure CLI script."
                    sleep 10
                    echo "Deployment Status: Successful"
                    
                    // Capture deployment logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Deploy to Staging] Deploy to Staging completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo "Run integration tests on the staging environment using in-built tools within Azure, using an Azure resource."
                    sleep 1
                    echo "SUCCESS"
                    echo "project_code.jar is ready for production deployment"
                    
                    // Capture staging integration tests logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Integration Tests on Staging] Integration Tests on Staging completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
        }
        stage('Deploy to Production Environment') {
            steps {
                script {
                    echo "Deploy project_code.jar to Azure Web App production environment using an Azure resource."
                    sleep 1
                    echo "SUCCESS"
                    echo "project_code.jar is successfully deployed to the production environment."
                    
                    // Capture production deployment logs with timestamp and stage name
                    bat "echo [$(date /t)] [$(time /t)] [Deploy to Production Environment] Deploy to Production Environment completed. >> ${env.BUILD_LOG_PATH}"
                }
            }
        }
    }
}
